---
title: Functions and Loops
date: 2014-09-19
---

In this module, we will learn

1. To create and call functions
2. To create a "for loop"
3. To "append" or add items to a list

We are now ready to start writing a function to gather all of the information we want from the DPLA.

We now have a file that looks like this:
	
	from dpla.api import DPLA

	dpla = DPLA('Your-Key-Here')

	# result = dpla.search('cooking', fields=['sourceResource'], page_size = 50)
	# print result.items[1]
	
	all_records = []
	
We will now add a function that handles the query for any given page number.

### 1. Creating a "Pull Records" Function

Functions are little packets of code that do particular tasks. They involve variables and processes, they take what is given to them, and spit out a result. 

To write a function, we start with the word "def", then give our function a name, and finally end with '():' Inside the parentheses, we can indicate how many pieces of information are going into the function.

In your "my_first_script.py" file, add the line

	def pull_records(pages, end, size):

In this line, you have declared a 'pull_records' function, and told the computer that this function will involve three variables (pages, end, and size).These three variables are arbitrary (you could name them "snap", "crackle", and "pop") but will stand for the first page, the last page, and the number of items per page. 

We are now ready to add the steps involved in getting the search records. 

On the next line, tab in once and type:
	
	def pull_records(pages, end, size):
		paged_search = dpla.search('cooking', fields=['sourceResource'], page_size=size, page=pages)

Your file should now look like this:

	from dpla.api import DPLA

	dpla = DPLA('Your-Key-Here')

	# result = dpla.search('cooking', fields=['sourceResource'], page_size = 50)
	# print result.items[1]
	
	all_records = []

	def pull_records(pages, end, size):
		paged_search = dpla.search('cooking', fields=['sourceResource'], page_size=size, page=pages)

It is important to note that Python is white-space aware: when writing functions in Python, white space is used to designate what is in a function or within a loop and what is outside of it.

Let's add a "print" statement to our function and test out the first stage of this function. On the next line, tab in and add the following "print" statement after "paged_search...":

	def pull_records(pages, end, size):
		paged_search = dpla.search('cooking', fields=['sourceResource'], page_size = size, page = pages)
		print paged_search.items[2]

Now to run the function, we will call the function name and give it values. On a new line and outside of the function, add the line:

	pull_records(2, 3, 50)
	
Your file should now look like:

	from dpla.api import DPLA

	dpla = DPLA('Your-Key-Here')

	# result = dpla.search('cooking', fields=['sourceResource'], page_size = 50)
	# print result.items[1]
	
	all_records = []

	def pull_records(pages, end, size):
		paged_search = dpla.search('cooking',fields=['sourceResource'],  page_size=size, page=pages)
		print paged_search.items[2]

	pull_records(2, 3, 50)

Save the file and go to Terminal to run it. Then come back to the function and work with your table to understand how the function worked.

### 2. Using a 'for loop' to save items to 'all_records'

You have written and executed your first function! Well done!

Now we need to add another function to store those results to the empty 'all_records' array we set up in the last module. While this is not necessary when you only have one page of results, it becomes necessary when you are trying to save from multiple pages.

To set up our new "Save Each" function, we will define a new function in our my_first_script.py file. Good practice is to group our functions together toward the top of the file, so put the "save_each" function after "pull_records" but before we call the "pull_records" function:

	def save_each(n):

The 'n' here is again arbitrary. We are telling the function that there is one variable that we will be passing in, and to take that variable and plug it in for 'n' throughout the function.

We now need to add our first loop. With our current search, there are 50 items in our paged_search variable. We want to save each of those items separately to the "all_records" list. This means the computer needs to move through each individual item, grab the item, and add it to "all_records". 

Tabbing in one space on the next line under <span class="command">def save_each(n):</span>s add:

	for each in n.items:

This is called a "for loop". It tells the computer to iterate through each item in the list "n". 

Because this is a process inside a process, we need to tab in again. Each time we have a new loop or new function, we tab in all the lines associated with that process. To show that we're done listing steps for a particular process, we tab back out.

To add the item to the "all_records" array, we use the "append" command:

	all_records.append(each)

"append" grabs the value of "each" and adds it to the series we are saving as a list.

Your "save_each()" function should now look like this:

	def save_each(n):
		for each in n.items:
			all_records.append(each)

Now we can use this function in our "pull records" function. Currently, our "pull records" looks as follows:

	def pull_records (pages, end, size):
		paged_search = dpla.search('cooking', fields=['sourceResource'],  page_size=size, page=pages)
		print paged_search.items[2]

Let's comment out the "print paged_search.item[2]" line, because that was just there to check that the first bit worked. 

Now add a call to the "save_each" function, that passes in our search results. 

	def pull_records (pages, end, size):
		paged_search = dpla.search('cooking', fields=['sourceResource'],  page_size=size, page=pages)
		# print paged_search.items[2]	
		save_each(paged_search)

Our file should now look like:

	from dpla.api import DPLA

	dpla = DPLA('Your-Key-Here')

	# result = dpla.search('cooking', fields=['sourceResource'], page_size = 50)
	# print result.items[1]
	
	all_records = []

	def pull_records(pages, end, size):
		paged_search = dpla.search('cooking',fields=['sourceResource'],   page_size=size, page=pages)
		# print paged_search.items[2]	
		save_each(paged_search)

	def save_each(n):
		for each in n.items:
			all_records.append(each)

	pull_records(2, 3, 50)

To test this, let's now add a "print" statement to the end of the file, after the "pull_records" function has been run, to make sure that the items are going into the "all_records" variable.

After "pull_records()" add:

	print all_records[30]

Save and run your script.

We have made great progress! We now have two functions to handle making the query and saving the results, but we are still only working with one "page" of search results at a time. In the next module, we will add yet another kind of loop in order to move through the different pages.

### Group Challenge

Break out the paper and pencils. Work as a group to create a diagram or metaphor for a "for loop". When would a "for loop" be useful?  

<span class="left">[Previous Module](module06.html)</span>
<span class="right">[Next Module](module08.html)</span>
