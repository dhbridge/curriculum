---
title: Using the Loop
date: 2014-09-19
published:false
---

In this module, we are going to learn about one of the most important programming concepts: the loop. In a loop, you tell the computer to do something to every item in a set, or in Python speak, in an list. We will start simple, displaying information on each item, and then work to something a bit more complicated.

### Asking Questions of Our Data

We have been able to do a lot with filtering the data by subject headings, by geographic space, and by contributor. But what if we want to ask questions about how the materials are described across all 10,000 items associated with "cooking"? Say we are interested in how those descriptions of items related to cooking are gendered. How would we investigate patterns across the entirety of the DPLA's holdings?

There are many ways one could go about investigating the descriptions. Work with your table to brain storm a couple of approaches.


One way to investigate patterns across all of the collections is to gather all of the descriptions into a "bag of words" and see what the most common words are across all of the collections.

To start, we need to collect all of the items in the DPLA library associated with "cooking". Remember that the API by default gives us 10 items at a time. We can pass a variable to get up to 500 items at a time, but there were 10,909 items associated wtih "cooking". To get all of that data, we are going to use the programming concept of the **loop**. In the next module, we will be good internet citizens and save that data to a file, so that we don't repeatedly hit the DPLA's server for 10,000 items. 

### Getting All of the Data

// Code we need to get them to:

from dpla.api import DPLA
import json

dpla = DPLA('19333ea341fcf105da35995eecb6356b')

all_records = []
search_term = "cooking"

		
def get_total_pages(search_term):
	result = dpla.search(search_term)
	total = result.count	
	total_pages = total/500 + 1
	return total_pages

def save_each(n):
	for each in n.items:
		all_records.append(each)

def pull_records(pages, end, size):
	while(pages <= end):
		paged_search = dpla.search(q=search_term, page_size=size, page=pages)
		print "finished page " + str(pages)
		pages = pages + 1
	
	save_results()
		
end = get_total_pages(search_term)	

pull_records(1, end, 500)	







